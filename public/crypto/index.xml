<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cryptos on Terminal</title>
    <link>https://team-meowsec.github.io/crypto/</link>
    <description>Recent content in Cryptos on Terminal</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Aug 2025 09:53:27 +0530</lastBuildDate>
    <atom:link href="https://team-meowsec.github.io/crypto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cipher 408</title>
      <link>https://team-meowsec.github.io/crypto/cipher_408/</link>
      <pubDate>Mon, 04 Aug 2025 09:53:27 +0530</pubDate>
      <guid>https://team-meowsec.github.io/crypto/cipher_408/</guid>
      <description>An old scrap of paper was found in a dusty archive, filled with strange symbols. No one knows who wrote it—but some say it&amp;#39;s connected to an infamous cold case. The symbols aren’t just decoration. They hold a message, and maybe even a flag. Flag format: flag{text} Reverse searching this image will lead you to this wikipedia article.&#xA;https://en.wikipedia.org/wiki/File:Zodiac_Z340_cipher_key.png&#xA;Something about Zodiac, digging deeper, you can uncover information about the zodiac killer and the encrypted messages sent by that person.</description>
    </item>
    <item>
      <title>Onion Peel</title>
      <link>https://team-meowsec.github.io/crypto/onion_peel/</link>
      <pubDate>Mon, 04 Aug 2025 09:53:27 +0530</pubDate>
      <guid>https://team-meowsec.github.io/crypto/onion_peel/</guid>
      <description>Each layer hides a deeper truth, and your task is to peel them back one by one. The more layers you remove, the closer you’ll get to the flag hidden at the core. We have 2 files&#xA;random_encodings.py:&#xA;import random import base64 f=open(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;) flag=f.read() for i in range(10): choice=random.randint(1,2) if choice == 1: flag = base64.b64encode(flag.encode()).decode() elif choice == 2: flag = flag.encode().hex() print(flag) output.txt:&#xA;5458704e656b31365458704e656c56365458704e656b31365458704f616b31365458704e656b31365458704e656b31365458704e656b31365358704e656b31365458704e656b31365458704e656b31365458704e643031365458704e656b31365458706a656b31365458704e656b31365430524e656b31365458704e656b30775458704e656b35715458704e656c56365458704e656b31365458704f524531365458704e656b313654544e4e656b31365458704e656b31365558704e656b31365458704e656b35715458704e656b31365458704e4d4531365458704e656b31365458706a656b31365458704e656b3136546d704e656b31365458704e656b31355458704e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b313654544e4e656b31365458704e656b31365158704e656b31365458704e656b35715458704e656c6c365458704e655531365458704e656b313654587056656b31365458704e656b31365457704e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b31365458704f564531365458704e656b313654586c4e656b31365458704e656b31365933704e656b31365458704e656b31455458704e656b31365458704e4d5531365458704e656b313654587052656b31365458704e656b3136546c524e656b31365458704e656b30775458704e656b31365458704e656c46365458704e656b31365458704f616b31365458704e656b313654544a4e656b31365458704e656b31365258704e656b31365458704e656b35715458704e656b31365458704e656b31365458704e656b313654587052656b31365458704e656b3136546d704e656b31365458704e656b30795458704e656b35715458704e656b31365458704e656b31365458704f656b31365458704e656b313654586c4e656b31365458704e656b31365658704e656b30795458704e656b31555458704e656b31365458704e4d4531365458704e656b31365458705a656b31365458704e656b3136546d704e656b31365458704e656b30775458704e656b31365458704e656c6c365458704e656b31365458704e564531365458704e656b313654544a4e656b31365458704e656b31365358704e656b31365458704e656b35555458704e656b31365458704e4d6b31365458704e656b313654587052656b313654544a4e656b31365456524e656b31365458704e656b30775458704e656b35715458704e656b56365458704e656b31365458704f564531365458704e656b31365454464e656b31365458704e656b31365458704e656b31365458704e656b31715458704e656b31365458704e656b31365458704e656b313654587056656b31365458704e656b3136546d704e656b31365458704e656b31345458704e656b31365458704e656c6c365458704e656b31365458704e564531365458704e656b31365458704e656b31365458704e656b31365258704e656b31365458704e656b35555458704e656b31365458704e4e5531365458704e656b31365458706a656b31365458704e656b3136546e704e656b31365458704e656b30795458704e656b31365458704e656b31365458704e656b31365458704f524531365458704e656b31365454524e656b31365458704e656b31365933704e656b31365458704e656b31455458704e656b31365458704e4d5531365458704e656b31365458706e656b31365458704e656b3136546d704e656b31365458704e656b31355458704e656b31365458704e656c46365458704e656b31365458704f656b31365458704e656b313654544a4e656b31365458704e656b31365558704e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b313654587056656b31365458704e656b3136546c524e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b31365458704f616b31365458704e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b39555458704e656b31365458704e4d5531365458704e656b313654587042656b31365458704e656b3136546c524e656b31365458704e656b31345458704e656b31365458704e656b31365458704e4d6b31365458704f524531365458704e656b31365458704e656b3136546d704e656b31365554303d If you read the python code, its pretty clear what its doing.</description>
    </item>
  </channel>
</rss>
