<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terminal</title>
    <link>https://team-meowsec.github.io/</link>
    <description>Recent content on Terminal</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Aug 2025 09:59:22 +0530</lastBuildDate>
    <atom:link href="https://team-meowsec.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Corrupted Vision</title>
      <link>https://team-meowsec.github.io/forensics/corrupted_vison/</link>
      <pubDate>Mon, 04 Aug 2025 09:59:22 +0530</pubDate>
      <guid>https://team-meowsec.github.io/forensics/corrupted_vison/</guid>
      <description>Corrupted Vision Do you know about file signatures? This one has some bytes that are not right. Find the right ones, replace it and the flag is yours. While seeing the file extension, it was png but to confirm it we can use the file command (It is a shell command for reporting the type of data contained in a file). But it shows as data so something is weird</description>
    </item>
    <item>
      <title>Data about Data</title>
      <link>https://team-meowsec.github.io/forensics/data_about_data/</link>
      <pubDate>Mon, 04 Aug 2025 09:59:22 +0530</pubDate>
      <guid>https://team-meowsec.github.io/forensics/data_about_data/</guid>
      <description>Data about Data An image is worth a thousand words… but maybe just one flag. Your task is to inspect this seemingly innocent image and find something hidden but not encrypted. The flag is not in the pixels, but in the details. Metadata describes information about a file without being part of the main content itself, it can contains the informations like descriptions, image size, width, height and lot more and exiftool is used for reading, writing, and editing metadata in image, audio, video, PDF, and other types of files</description>
    </item>
    <item>
      <title>EOF</title>
      <link>https://team-meowsec.github.io/forensics/eof/</link>
      <pubDate>Mon, 04 Aug 2025 09:59:22 +0530</pubDate>
      <guid>https://team-meowsec.github.io/forensics/eof/</guid>
      <description>EOF I have hidden some text in this image, I bet no one can find this hehehe.. Here a text or flag is hidden in the image, there are various methods to hide the text in the image like hiding in metadata, head or tail and LSB, etc.&#xA;Now checking the strings or readable character in the file using the strings command which is a utility in Linux that extracts human-readable text strings from binary files, but the result shows nothing important.</description>
    </item>
    <item>
      <title>Holy System</title>
      <link>https://team-meowsec.github.io/osint/holy_system/</link>
      <pubDate>Mon, 04 Aug 2025 09:59:22 +0530</pubDate>
      <guid>https://team-meowsec.github.io/osint/holy_system/</guid>
      <description>This man claims that God himself chose him to be his programming and he wrote an entire operating system in less than 100,000 lines of code. What is the name of the language the OS was written in and what acted as its oracle? flag format: meowsec{os_name-oracle_program_name} The person being referred to here is Terry Davis. A programmer known for creating TempleOS, an entire operating system. He made his own programming language known as holy C.</description>
    </item>
    <item>
      <title>Who are you?</title>
      <link>https://team-meowsec.github.io/osint/who_are_you/</link>
      <pubDate>Mon, 04 Aug 2025 09:59:22 +0530</pubDate>
      <guid>https://team-meowsec.github.io/osint/who_are_you/</guid>
      <description>I wonder who &amp;#34;minato500&amp;#34; is. I heard he plays a lot of CTF&amp;#39;s. Can you find their full name? Flag format: meowsec{full_name} Just a quick google search of minato500 will lead you to his CTFtime page, which contains his full name&#xA;Final Flag:&#xA;meowsec{harish_kumar_n} </description>
    </item>
    <item>
      <title>Cipher 408</title>
      <link>https://team-meowsec.github.io/crypto/cipher_408/</link>
      <pubDate>Mon, 04 Aug 2025 09:53:27 +0530</pubDate>
      <guid>https://team-meowsec.github.io/crypto/cipher_408/</guid>
      <description>An old scrap of paper was found in a dusty archive, filled with strange symbols. No one knows who wrote it—but some say it&amp;#39;s connected to an infamous cold case. The symbols aren’t just decoration. They hold a message, and maybe even a flag. Flag format: flag{text} Reverse searching this image will lead you to this wikipedia article.&#xA;https://en.wikipedia.org/wiki/File:Zodiac_Z340_cipher_key.png&#xA;Something about Zodiac, digging deeper, you can uncover information about the zodiac killer and the encrypted messages sent by that person.</description>
    </item>
    <item>
      <title>Git Gud</title>
      <link>https://team-meowsec.github.io/osint/git_gud/</link>
      <pubDate>Mon, 04 Aug 2025 09:53:27 +0530</pubDate>
      <guid>https://team-meowsec.github.io/osint/git_gud/</guid>
      <description>Git Gud We intercepted a secret communication between 2 people, they seem to be planning a hack on google, can you find out their secret? quixel200: hey man, I made a repo to share our theories. minato500: good job, just make sure its private. quixel200: wait its public!!! minato500: !!!?? Ill mangle the secret so nobody finds out, ill make the repo look normal. quixel200: we&amp;#39;re so smart, nobody&amp;#39;s gonna find out, right?</description>
    </item>
    <item>
      <title>Onion Peel</title>
      <link>https://team-meowsec.github.io/crypto/onion_peel/</link>
      <pubDate>Mon, 04 Aug 2025 09:53:27 +0530</pubDate>
      <guid>https://team-meowsec.github.io/crypto/onion_peel/</guid>
      <description>Each layer hides a deeper truth, and your task is to peel them back one by one. The more layers you remove, the closer you’ll get to the flag hidden at the core. We have 2 files&#xA;random_encodings.py:&#xA;import random import base64 f=open(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;) flag=f.read() for i in range(10): choice=random.randint(1,2) if choice == 1: flag = base64.b64encode(flag.encode()).decode() elif choice == 2: flag = flag.encode().hex() print(flag) output.txt:&#xA;5458704e656b31365458704e656c56365458704e656b31365458704f616b31365458704e656b31365458704e656b31365458704e656b31365358704e656b31365458704e656b31365458704e656b31365458704e643031365458704e656b31365458706a656b31365458704e656b31365430524e656b31365458704e656b30775458704e656b35715458704e656c56365458704e656b31365458704f524531365458704e656b313654544e4e656b31365458704e656b31365558704e656b31365458704e656b35715458704e656b31365458704e4d4531365458704e656b31365458706a656b31365458704e656b3136546d704e656b31365458704e656b31355458704e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b313654544e4e656b31365458704e656b31365158704e656b31365458704e656b35715458704e656c6c365458704e655531365458704e656b313654587056656b31365458704e656b31365457704e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b31365458704f564531365458704e656b313654586c4e656b31365458704e656b31365933704e656b31365458704e656b31455458704e656b31365458704e4d5531365458704e656b313654587052656b31365458704e656b3136546c524e656b31365458704e656b30775458704e656b31365458704e656c46365458704e656b31365458704f616b31365458704e656b313654544a4e656b31365458704e656b31365258704e656b31365458704e656b35715458704e656b31365458704e656b31365458704e656b313654587052656b31365458704e656b3136546d704e656b31365458704e656b30795458704e656b35715458704e656b31365458704e656b31365458704f656b31365458704e656b313654586c4e656b31365458704e656b31365658704e656b30795458704e656b31555458704e656b31365458704e4d4531365458704e656b31365458705a656b31365458704e656b3136546d704e656b31365458704e656b30775458704e656b31365458704e656c6c365458704e656b31365458704e564531365458704e656b313654544a4e656b31365458704e656b31365358704e656b31365458704e656b35555458704e656b31365458704e4d6b31365458704e656b313654587052656b313654544a4e656b31365456524e656b31365458704e656b30775458704e656b35715458704e656b56365458704e656b31365458704f564531365458704e656b31365454464e656b31365458704e656b31365458704e656b31365458704e656b31715458704e656b31365458704e656b31365458704e656b313654587056656b31365458704e656b3136546d704e656b31365458704e656b31345458704e656b31365458704e656c6c365458704e656b31365458704e564531365458704e656b31365458704e656b31365458704e656b31365258704e656b31365458704e656b35555458704e656b31365458704e4e5531365458704e656b31365458706a656b31365458704e656b3136546e704e656b31365458704e656b30795458704e656b31365458704e656b31365458704e656b31365458704f524531365458704e656b31365454524e656b31365458704e656b31365933704e656b31365458704e656b31455458704e656b31365458704e4d5531365458704e656b31365458706e656b31365458704e656b3136546d704e656b31365458704e656b31355458704e656b31365458704e656c46365458704e656b31365458704f656b31365458704e656b313654544a4e656b31365458704e656b31365558704e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b313654587056656b31365458704e656b3136546c524e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b31365458704f616b31365458704e656b31365458704e656b31365458704e656b31365458704e656b31365458704e656b39555458704e656b31365458704e4d5531365458704e656b313654587042656b31365458704e656b3136546c524e656b31365458704e656b31345458704e656b31365458704e656b31365458704e4d6b31365458704f524531365458704e656b31365458704e656b3136546d704e656b31365554303d If you read the python code, its pretty clear what its doing.</description>
    </item>
  </channel>
</rss>
